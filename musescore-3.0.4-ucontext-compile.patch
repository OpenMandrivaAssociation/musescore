diff -up musescore-3.0.4/thirdparty/libcrashreporter-qt/3rdparty/breakpad/client/linux/handler/exception_handler.cc.omv~ musescore-3.0.4/thirdparty/libcrashreporter-qt/3rdparty/breakpad/client/linux/handler/exception_handler.cc
--- musescore-3.0.4/thirdparty/libcrashreporter-qt/3rdparty/breakpad/client/linux/handler/exception_handler.cc.omv~	2019-03-06 20:32:38.440399615 +0100
+++ musescore-3.0.4/thirdparty/libcrashreporter-qt/3rdparty/breakpad/client/linux/handler/exception_handler.cc	2019-03-06 20:32:40.969387006 +0100
@@ -397,12 +397,12 @@ bool ExceptionHandler::HandleSignal(int
   }
   CrashContext context;
   memcpy(&context.siginfo, info, sizeof(siginfo_t));
-  memcpy(&context.context, uc, sizeof(struct ucontext));
+  memcpy(&context.context, uc, sizeof(struct ucontext_t));
 #if !defined(__ARM_EABI__) && !defined(__mips__)
   // FP state is not part of user ABI on ARM Linux.
-  // In case of MIPS Linux FP state is already part of struct ucontext
+  // In case of MIPS Linux FP state is already part of struct ucontext_t
   // and 'float_state' is not a member of CrashContext.
-  struct ucontext *uc_ptr = (struct ucontext*)uc;
+  struct ucontext_t *uc_ptr = (struct ucontext_t*)uc;
   if (uc_ptr->uc_mcontext.fpregs) {
     memcpy(&context.float_state,
            uc_ptr->uc_mcontext.fpregs,
@@ -426,7 +426,7 @@ bool ExceptionHandler::SimulateSignalDel
   // ExceptionHandler::HandleSignal().
   siginfo.si_code = SI_USER;
   siginfo.si_pid = getpid();
-  struct ucontext context;
+  struct ucontext_t context;
   getcontext(&context);
   return HandleSignal(sig, &siginfo, &context);
 }
diff -up musescore-3.0.4/thirdparty/libcrashreporter-qt/3rdparty/breakpad/client/linux/handler/exception_handler.h.omv~ musescore-3.0.4/thirdparty/libcrashreporter-qt/3rdparty/breakpad/client/linux/handler/exception_handler.h
--- musescore-3.0.4/thirdparty/libcrashreporter-qt/3rdparty/breakpad/client/linux/handler/exception_handler.h.omv~	2019-03-06 20:32:01.477016366 +0100
+++ musescore-3.0.4/thirdparty/libcrashreporter-qt/3rdparty/breakpad/client/linux/handler/exception_handler.h	2019-03-06 20:32:32.687429363 +0100
@@ -189,10 +189,10 @@ class ExceptionHandler {
   struct CrashContext {
     siginfo_t siginfo;
     pid_t tid;  // the crashing thread.
-    struct ucontext context;
+    struct ucontext_t context;
 #if !defined(__ARM_EABI__) && !defined(__mips__)
     // #ifdef this out because FP state is not part of user ABI for Linux ARM.
-    // In case of MIPS Linux FP state is already part of struct ucontext
+    // In case of MIPS Linux FP state is already part of struct ucontext_t
     // so 'float_state' is not required.
     struct _libc_fpstate float_state;
 #endif
diff -up musescore-3.0.4/thirdparty/libcrashreporter-qt/3rdparty/breakpad/client/linux/minidump_writer/minidump_writer.cc.omv~ musescore-3.0.4/thirdparty/libcrashreporter-qt/3rdparty/breakpad/client/linux/minidump_writer/minidump_writer.cc
--- musescore-3.0.4/thirdparty/libcrashreporter-qt/3rdparty/breakpad/client/linux/minidump_writer/minidump_writer.cc.omv~	2019-03-06 20:33:16.481240534 +0100
+++ musescore-3.0.4/thirdparty/libcrashreporter-qt/3rdparty/breakpad/client/linux/minidump_writer/minidump_writer.cc	2019-03-06 20:34:08.804122216 +0100
@@ -277,7 +277,7 @@ void CPUFillFromThreadInfo(MDRawContextA
   my_memcpy(&out->flt_save.xmm_registers, &info.fpregs.xmm_space, 16 * 16);
 }
 
-void CPUFillFromUContext(MDRawContextAMD64 *out, const ucontext *uc,
+void CPUFillFromUContext(MDRawContextAMD64 *out, const ucontext_t *uc,
                          const struct _libc_fpstate* fpregs) {
   const greg_t* regs = uc->uc_mcontext.gregs;
 
@@ -1725,7 +1725,7 @@ class MinidumpWriter {
   const int fd_;  // File descriptor where the minidum should be written.
   const char* path_;  // Path to the file where the minidum should be written.
 
-  const struct ucontext* const ucontext_;  // also from the signal handler
+  const struct ucontext_t* const ucontext_;  // also from the signal handler
   const struct _libc_fpstate* const float_state_;  // ditto
   LinuxDumper* dumper_;
   MinidumpFileWriter minidump_writer_;
